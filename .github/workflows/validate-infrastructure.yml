name: validate-infrastructure
on:
  push:
    branches: [main]
    paths:
      - "envs/**"
      - "providers/**"
      - ".github/workflows/validate-infrastructure.yml"
  pull_request:
    branches: [main]
    paths:
      - "envs/**"
      - "providers/**"
      - ".github/workflows/validate-infrastructure.yml"

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # SÚPER-ÉLITE: OpenTofu setup con mejores prácticas 2025
      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.10.6
          tofu_arch: amd64

      - name: Setup Node.js (para herramientas modernas)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache OpenTofu
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugins
            ~/.opentofu.d/plugins
          key: ${{ runner.os }}-opentofu-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-opentofu-

      - name: Install validation tools
        run: |
          # TFLint - Linting avanzado
          curl -sSfL https://raw.githubusercontent.com/terraform-linters/tflint/master/install.sh | sh
          sudo mv tflint /usr/local/bin/

          # TFSec - Security scanning
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/main/scripts/install.sh | sh
          sudo mv tfsec /usr/local/bin/

      - name: Cargar secrets
        run: |
          echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: envs/dev
        run: |
          tofu init -input=false -upgrade

      - name: Terraform Format Check
        working-directory: envs/dev
        run: |
          tofu fmt -check -recursive -diff

      - name: Terraform Validate
        working-directory: envs/dev
        run: |
          tofu validate

      - name: TFLint
        working-directory: envs/dev
        run: |
          tflint --init
          tflint --format=json | tee tflint-results.json

      - name: TFSec Security Scan
        working-directory: envs/dev
        run: |
          tfsec . --format=json --out=tfsec-results.json

      - name: Terraform Plan
        working-directory: envs/dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
        run: |
          tofu plan -compact-warnings -no-color

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            envs/dev/tflint-results.json
            envs/dev/tfsec-results.json
          retention-days: 30

      - name: Comment PR with Security Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const tflintResults = JSON.parse(fs.readFileSync('envs/dev/tflint-results.json', 'utf8'));
              const issues = tflintResults.issues || [];

              if (issues.length > 0) {
                const comment = `## 🔍 TFLint Results\n\nFound ${issues.length} issues:\n\n${issues.map(issue =>
                  `- **${issue.rule}**: ${issue.message} (${issue.range.filename}:${issue.range.start.line})`
                ).join('\n')}`;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('No TFLint results to comment');
            }
